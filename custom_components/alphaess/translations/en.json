{
  "title": "Alpha ESS",
  "config": {
    "step": {
      "user": {
        "description": "Enter your AppID and AppSecret from the AlphaESS OpenAPI developer portal \n \n If you have any issues with the OpenAPI, read a list of potential fixes [here](https://github.com/CharlesGillanders/homeassistant-alphaESS?tab=readme-ov-file#issues-with-registering-systems-to-the-alphaess-openapi)",
        "data": {
          "AppID": "AppID",
          "AppSecret": "AppSecret",
          "IPAddress": "IP Address (for local API access), 0 to disable"
        }
      }
    },
    "abort": {
      "already_configured": "Account is already configured"
    },
    "error": {
      "cannot_connect": "Failed to connect",
      "invalid_auth": "Invalid authentication",
      "unknown": "Unexpected error"
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "IPAddress": "IP Address (local API access), 0 to disable"
        }
      }
    }
  },
  "entity": {
    "sensor": {
      "ev_charger_status": {
        "name": "EV Charger Status",
        "state": {
          "available": "Available (not plugged in)",
          "preparing": "Preparing (plugged in)",
          "charging": "Charging",
          "suspended_evse": "Suspended by EVSE",
          "suspended_ev": "Suspended by EV",
          "finishing": "Finishing",
          "faulted": "Faulted",
          "unknown": "Unknown"
        }
      },
      "tcp_status": {
        "name": "TCP Status",
        "state": {
          "connected_ok": "Connected OK",
          "initialization": "Initialization",
          "not_connected_router": "Not connected to a router",
          "dns_lookup_error": "DNS lookup error",
          "connect_fail": "Connect fail",
          "signal_too_weak": "Signal too weak",
          "failed_register_base_station": "Failed to register base station",
          "sim_card_not_inserted": "SIM Card not inserted",
          "not_bound_plant": "Not bound to a plant",
          "key_error": "KEY error",
          "sn_error": "SN error",
          "communication_timeout": "Communication timeout",
          "communication_abort_server": "Communication abort by server",
          "server_address_error": "Server address error"
        }
      },
      "ethernet_status": {
        "name": "Ethernet Status",
        "state": {
          "link_up": "Link Up",
          "link_down": "Link Down"
        }
      },
      "four_g_status": {
        "name": "4G Status",
        "state": {
          "ok": "OK",
          "initialization": "Initialization",
          "connected_fail": "Connected fail",
          "connected_lost": "Connected lost",
          "unknown_error": "Unknown Error"
        }
      }
    }
  }
}